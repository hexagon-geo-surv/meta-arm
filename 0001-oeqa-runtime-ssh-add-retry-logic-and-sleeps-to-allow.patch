commit f0fe0b490d309cdf1c97754f85a61b5b948b7f28
Author: Jon Mason <jdmason@kudzu.us>
Date:   Mon Jun 24 18:20:24 2024 -0400

    oeqa/runtime/ssh: add retry logic and sleeps to allow for slower systems
    
    On exceptionally slow systems, the ssh test can intermittently fail due
    to a race between when ping works and the networking applications being
    brought up.  To work around this issue, add some retry logic when ssh
    fails to connect.  According to the man page of ssh, "ssh exits
    with the exit status of the remote command or with 255 if an error
    occurred."  So, only retry if the return code is 255, and limit the
    number of retries to prevent it looping forever.
    
    Signed-off-by: Jon Mason <jdmason@kudzu.us>
    Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>

diff --git a/meta/lib/oeqa/runtime/cases/ssh.py b/meta/lib/oeqa/runtime/cases/ssh.py
index cdbef595008c..ae92bb34cd9c 100644
--- a/meta/lib/oeqa/runtime/cases/ssh.py
+++ b/meta/lib/oeqa/runtime/cases/ssh.py
@@ -4,6 +4,8 @@
 # SPDX-License-Identifier: MIT
 #
 
+import time
+
 from oeqa.runtime.case import OERuntimeTestCase
 from oeqa.core.decorator.depends import OETestDepends
 from oeqa.runtime.decorator.package import OEHasPackage
@@ -13,12 +15,20 @@ class SSHTest(OERuntimeTestCase):
     @OETestDepends(['ping.PingTest.test_ping'])
     @OEHasPackage(['dropbear', 'openssh-sshd'])
     def test_ssh(self):
-        (status, output) = self.target.run('sleep 20', timeout=2)
-        msg='run() timed out but return code was zero.'
-        self.assertNotEqual(status, 0, msg=msg)
-        (status, output) = self.target.run('uname -a')
-        self.assertEqual(status, 0, msg='SSH Test failed: %s' % output)
-        (status, output) = self.target.run('cat /etc/controllerimage')
-        msg = "This isn't the right image  - /etc/controllerimage " \
-              "shouldn't be here %s" % output
-        self.assertEqual(status, 1, msg=msg)
+        for i in range(5):
+          status, output = self.target.run("uname -a", timeout=5)
+          if status == 0:
+              break
+          elif status == 255:
+              # ssh returns 255 only if a ssh error occurs.  This could
+              # be an issue with "Connection refused" because the port
+              # isn't open yet, and this could check explicitly for that
+              # here.  However, let's keep it simple and just retry for
+              # all errors a limited amount of times with a sleep to
+              # give it time for the port to open.
+              time.sleep(5)
+              continue
+          else:
+              self.fail("uname failed with \"%s\"" %output)
+        if status == 255:
+            self.fail("ssh error %s" %output)

commit 127d3bd8d5509ae17e359c1365859fd362ffc74f
Author: Richard Purdie <richard.purdie@linuxfoundation.org>
Date:   Thu Jul 4 11:10:38 2024 +0100

    oeqa/runtime/ssh: In case of failure, show exit code and handle -15 (SIGTERM)
    
    Ensure we show the failing exit code in case of failures.
    
    We're seeing autobuilder failures with -15 (SIGTERM) which is probably from
    slow boot/init. Retry in these cases for now.
    
    Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>

diff --git a/meta/lib/oeqa/runtime/cases/ssh.py b/meta/lib/oeqa/runtime/cases/ssh.py
index ae92bb34cd9c..9a8deb3f25ea 100644
--- a/meta/lib/oeqa/runtime/cases/ssh.py
+++ b/meta/lib/oeqa/runtime/cases/ssh.py
@@ -5,6 +5,7 @@
 #
 
 import time
+import signal
 
 from oeqa.runtime.case import OERuntimeTestCase
 from oeqa.core.decorator.depends import OETestDepends
@@ -19,16 +20,18 @@ class SSHTest(OERuntimeTestCase):
           status, output = self.target.run("uname -a", timeout=5)
           if status == 0:
               break
-          elif status == 255:
+          elif status == 255 or status == -signal.SIGTERM:
               # ssh returns 255 only if a ssh error occurs.  This could
               # be an issue with "Connection refused" because the port
               # isn't open yet, and this could check explicitly for that
               # here.  However, let's keep it simple and just retry for
               # all errors a limited amount of times with a sleep to
               # give it time for the port to open.
+              # We sometimes see -15 (SIGTERM) on slow emulation machines too, likely
+              # from boot/init not being 100% complete, retry for these too.
               time.sleep(5)
               continue
           else:
-              self.fail("uname failed with \"%s\"" %output)
+              self.fail("uname failed with \"%s\" (exit code %s)" % (output, status))
         if status == 255:
             self.fail("ssh error %s" %output)

commit 3c3ebe591eef6e0479d623ec2237cfea16db5c80
Author: Jon Mason <jdmason@kudzu.us>
Date:   Thu Jul 4 16:31:56 2024 -0400

    oeqa/runtime/ssh: check for all errors at the end
    
    With the retry for the -SIGTERM, it is possible to still see that error
    after the 5th attempt and mark the run a success.  Check for any
    non-zero status in the final check and error out to close the gap.
    While there, make the error print match the one above and be a little
    more verbose.  Also, I'm seeing it take roughly 6 attempts on my local
    (very slow) system to pass.  So, increasing the number of attempts to
    10.
    
    Signed-off-by: Jon Mason <jdmason@kudzu.us>
    Signed-off-by: Richard Purdie <richard.purdie@linuxfoundation.org>

diff --git a/meta/lib/oeqa/runtime/cases/ssh.py b/meta/lib/oeqa/runtime/cases/ssh.py
index 9a8deb3f25ea..08430ae9dbb0 100644
--- a/meta/lib/oeqa/runtime/cases/ssh.py
+++ b/meta/lib/oeqa/runtime/cases/ssh.py
@@ -16,7 +16,7 @@ class SSHTest(OERuntimeTestCase):
     @OETestDepends(['ping.PingTest.test_ping'])
     @OEHasPackage(['dropbear', 'openssh-sshd'])
     def test_ssh(self):
-        for i in range(5):
+        for i in range(10):
           status, output = self.target.run("uname -a", timeout=5)
           if status == 0:
               break
@@ -33,5 +33,5 @@ class SSHTest(OERuntimeTestCase):
               continue
           else:
               self.fail("uname failed with \"%s\" (exit code %s)" % (output, status))
-        if status == 255:
-            self.fail("ssh error %s" %output)
+        if status != 0:
+            self.fail("ssh failed with \"%s\" (exit code %s)" % (output, status))
